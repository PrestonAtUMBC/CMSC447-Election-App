@page "/signup"
@using System.Text.RegularExpressions
@using ElectionAppLibrary.DataAccess
@using ElectionAppLibrary.Models
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IUserData _db



<div class="banner-container">
    <img src="banner2.png" alt="Banner" class="banner-image" />
    <h1 class="page-title"><b>Create Account</b></h1>
</div>

<div class="container">
    <div class="signup-form">
        <form @onsubmit="SignUp">
            <div class="form-group">
                <label for="userName">Username:</label>
                <input type="text" id="userName" class="form-control" @bind="user.username" />
            </div>
            <div class="form-group">
                <label for="email">Email Address:</label>
                <input type="email" id="email" class="form-control" @bind="user.email" />
            </div>
            <div class="form-group">
                <label for="password">Password:</label>
                <input type="password" id="password" class="form-control" @bind="password" />
                @if (!string.IsNullOrEmpty(passwordErrorMessage))
                {
                    <p><strong style="color: red;">@passwordErrorMessage</strong></p>
                }
            </div>
            <div class="form-group">
                <label for="confirmPassword">Confirm Password:</label>
                <input type="password" id="confirmPassword" class="form-control" @bind="confirmPassword" />
                @if (!string.IsNullOrEmpty(confirmPasswordErrorMessage))
                {
                    <p><strong style="color: red;">@confirmPasswordErrorMessage</strong></p>
                }
                @if (!string.IsNullOrEmpty(usernameErrorMessage))
                {
                    <p><strong style="color: red;">@usernameErrorMessage</strong></p>
                }
            </div>
            <button type="submit" class="btn btn-red">Sign Up</button>
            <button type="button" class="btn btn-black" @onclick="Cancel">Cancel</button>
        </form>
    </div>
</div>

<style>
    .container {
    display: flex;
    justify-content: center;
    align-items: flex-start;
    height: fit-content;
    border: 2px solid rgba(0, 0, 0, 0.1);
    padding: 20px;
    width: fit-content;

    }

    .signup-form {
    width: 600px; 

}

       .banner-container {
        position: relative;
        width: 100%;
        max-width: 100vw;
        height: auto;
        overflow: hidden;
        margin-bottom: 40px;
    }

    .banner-image {
        width: 100vw;
        height: auto;
        display: block;
        opacity: 0.3;
    }

        .page-title {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: black;
        font-size: 100px;
        z-index: 2;
    }

    .btn {
        width: 100%; 
        margin-top: 10px;
     
    }
</style>

@code {

    private UserModel user = new UserModel();
    private string password;
    private string confirmPassword;
    private string passwordErrorMessage;
    private string confirmPasswordErrorMessage;
    private string usernameErrorMessage;

    private bool IsPasswordValid => ValidatePassword(password);
    private bool IsConfirmPasswordValid => password == confirmPassword;


    private bool ValidatePassword(string password)
    {
        var isValid = true;
        if (!Regex.IsMatch(password, @"^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^\w\d\s:])([^\s]){8,}$"))
        {
            isValid = false;
            passwordErrorMessage = "Password must have at least 1 number, 1 uppercase letter, 1 lowercase letter, 1 special character, and be at least 8 characters long.";
        }
        else
        {
            passwordErrorMessage = null;
        }
        return isValid;
    }

    private async Task SignUp()
    {
        if (IsPasswordValid && IsConfirmPasswordValid)
        {
            user.password = password;

            var existingUser = await _db.GetUser(user);

            if (existingUser != null)
            {
                usernameErrorMessage = "Username already exists.";
            }
            else
            {
                await _db.InsertUser(user);

                NavigationManager.NavigateTo("Login");
            }
        }
        else
        {
            confirmPasswordErrorMessage = "Confirm password does not match.";
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("Login");
    }
}
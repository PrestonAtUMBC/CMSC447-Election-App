@page "/Login"
@using ElectionAppLibrary.DataAccess
@using ElectionAppLibrary.Models
@inject LoginService UserLogin
@inject LoginService Credentials
@inject NavigationManager NavigationManager
@inherits LayoutComponentBase

@inject IUserData _db

<PageTitle>Login/Set Up</PageTitle>
<div class="login-container">
    <div class="login-form">
        <img src="/MarylandInfoLogo.png" alt="Login Avatar" class="login-avatar" />
    </div>
<h1>Login</h1>

    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="username">Username</label>
            <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
            <ValidationMessage For="@(() => loginModel.Username)" />
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" class="form-control" type="password" @bind-Value="loginModel.Password" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>
    @if (loginSuccess == -1)
    {
        <br />
        <div class="alert alert-danger" role="alert">
            Invalid username or password. Please try again.
        </div>
    }
    <div class="text-center">
        <p>Don't have an account? <a href="/Signup">Register</a></p>  
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private UserModel user = new UserModel();
    private int loginSuccess = 0;


    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryString = uri.Query;

        if (queryString.Contains("fromHome=true"))
        {

            if (UserLogin.User != null && !string.IsNullOrEmpty(UserLogin.User.username) && !string.IsNullOrEmpty(UserLogin.User.password)
            && UserLogin.User.isActive == false)
            {

                loginModel.Username = UserLogin.User.username;
                loginModel.Password = UserLogin.User.password;

                await HandleLogin();
            }
        }
        else
        {
            if (UserLogin.User != null && !string.IsNullOrEmpty(UserLogin.User.username))
        {
            NavigationManager.NavigateTo("/UserProfile");
        }
        }
    }
    
    private async Task HandleLogin()
    {
        user.username = loginModel.Username;
        user.password = loginModel.Password;

        user = await _db.UserLogin(user);

        if (user != null)
        {
            loginSuccess = 1;
            UserLogin.User = user;
            UserLogin.User.isActive = true;
            NavigationManager.NavigateTo("/UserProfile");
        }
        else
        {
            loginSuccess = -1;
        }
        /*
        var result = await _authenticationService.Login(loginModel);

        if (result.Succeeded)
        {
            _navigationManager.NavigateTo("/");
        }
        */
        user = new UserModel();
    }
    

    public class LoginModel
    {
        public string Username { get; set; }

        public string Password { get; set; }
    }

}

<style>
    .login-avatar{
        display: block;
        margin-left: auto;
        margin-right: auto;
        height: 30%;
        width: 30%;
    }
</style>
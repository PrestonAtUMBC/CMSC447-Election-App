@page "/FindMyPollingPlace"
@using ElectionAppLibrary.Models
@using ElectionAppLibrary.DataAccess
@inject LoginService UserLogin
@inject NavigationManager NavigationManager
@inject IVoterInfoAPI info
@inject IUserData _db

<PageTitle>Find My Polling Place</PageTitle>


<div class="banner-container">
	<img src="banner2.png" alt="Banner" class="banner-image" />
	<h1 class="page-title"><b>Find My Polling Place</b></h1>
</div>

<div class="container">
	<div class="search-address">
		<h4>Street Adress*:</h4>
		<EditForm Model="@userInput" OnValidSubmit="@SearchLocation">
			<DataAnnotationsValidator />
			<ValidationSummary />

			<InputText id="userStreetAddress" @bind-Value="userInput.userStreetAddress" />
			<p></p>
			<h4>Zip Code*:</h4>
			<p></p>
			<InputNumber id=userZipCode @bind-Value=userInput.userZipCode />
			<p></p>
			<button type="submit" class="btn btn-red">Submit</button>
		</EditForm>
		@if(errorCode == -1)
		{
			<br />
			<div class="alert alert-danger" role="alert">
				Polling location unavailable at this time. Please try again later.
			</div>
		}
		else if(errorCode == -2)
		{
			<br />
			<div class="alert alert-danger" role="alert">
				Invalid address. Please try again.
			</div>
		}
		@if (UserLogin.User != null && UserLogin.User.isActive == true)
		{
			<br />
			<button type="button" class="btn btn-red" @onclick="saveInfo">Save Info</button>
		}
	</div>
	<div>
		<iframe width="600"
				height="450"
				style="border:0"
				loading="lazy"
				allowfullscreen
				referrerpolicy="no-referrer-when-downgrade"
				src="https://www.google.com/maps/embed/v1/place?key=AIzaSyDRPOb2Wy4TIGZ2HcSuXLxxuIoNytPGIzE&q=@location">
		</iframe>
	</div>
</div>
<style>

	.container {
		display: flex;
		flex-flow: row wrap;
		padding: 2%;
		background-color: #ffd200;
		align-items: flex-start;
		border-radius: 10px;
	}
	.container > div {
		margin: auto;
	}
	.search-address {
		margin: auto;
	}

</style>
@code {
	private UserAddress userInput = new UserAddress();
	private int errorCode = 0;
	private string? address;
	private string location;
	private CandidateModel? candidate;
	//Placeholder
	private async Task SearchLocation()
	{
		if (String.IsNullOrEmpty(address))
		{
			address = $"{userInput.userStreetAddress}, {userInput.userZipCode}";
		}
		candidate = await info.getVoterInfo(address);
		if (candidate != null)
		{
			if (candidate.pollingLocations != null)
			{
				location = candidate.pollingLocations[0].address.locationName
				+ "+" + candidate.pollingLocations[0].address.line1
				+ "+" + candidate.pollingLocations[0].address.city
				+ "+" + candidate.pollingLocations[0].address.state
				+ "+" + candidate.pollingLocations[0].address.zip;

				location = location.Replace(" ", "+");
				errorCode = 1;
				StateHasChanged();
			}
			if (candidate.contests == null)
			{
				errorCode = -2;
				return;
			}
			errorCode = -1;
			return;
		}

	}

	private async void saveInfo()
	{
		if (String.Compare(location, "Maryland") == 0 || errorCode == -1)
		{
			return;
		}
		if (candidate != null)
		{
			UserLogin.User.address = candidate.pollingLocations[0].address.locationName
			+ " - " + candidate.pollingLocations[0].address.line1
			+ ", " + candidate.pollingLocations[0].address.city
			+ ", " + candidate.pollingLocations[0].address.state
			+ ", " + candidate.pollingLocations[0].address.zip;
			await _db.UpdateAddress(UserLogin.User);
		}
	}

	protected override async Task OnInitializedAsync()
	{

		var uri = new Uri(NavigationManager.Uri);
		var queryString = uri.Query;
		location = "Maryland";

		if (!string.IsNullOrEmpty(queryString))
		{
			var searchData = ExtractAddressData(queryString);
			if (!string.IsNullOrEmpty(searchData))
			{
				address = searchData;
				await SearchLocation();
				return;
			}
		}
		else if (UserLogin.User != null && UserLogin.User.isActive == true && !String.IsNullOrEmpty(UserLogin.User.address))
		{
			location = UserLogin.User.address;
			location = location.Replace(" - ", "+");
			location = location.Replace(" ", "+");
		}



		
	}

	protected string ExtractAddressData(string queryString)
	{
			var parameters = queryString.TrimStart('?').Split('&');
			foreach (var parameter in parameters)
			{
				var keyValue = parameter.Split('=');
				if (keyValue.Length == 2 && keyValue[0] == "address")
				{
					// Return the value of the "address" parameter
					return keyValue[1];
				}
			}
			return null;
	}

}

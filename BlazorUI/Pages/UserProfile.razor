@page "/UserProfile"
@using ElectionAppLibrary.DataAccess
@using ElectionAppLibrary.Models
@inject NavigationManager NavigationManager
@inject LoginService UserLogin
@inject IUserData _db

<div class="banner-container">
	<img src="banner2.png" alt="Banner" class="banner-image" />
	<h1 class="page-title"><b>My Profile</b></h1>
</div>
@if (string.IsNullOrEmpty(UserLogin.User.username))
{
	<div class="user-info" style="background-color: black">
		<h2 class="user-info-text">Welcome back, Tester</h2>
		<div class="user-info-container" style="display: flex;">
			<div class="user-email">
				<p class="user-info-text">Email: example@email.com</p>
				<button type="button" class="btn btn-red" @onclick="changeEmail">Change</button>
			</div>
			<div class="user-address">
				<p class="user-info-text">Address: 123 Example Street, Maryland, 20878</p>
				<button type="button" class="btn btn-red" @onclick="changeAddress">Change</button>
			</div>
		</div>
	</div>
}
else
{
	<div class="user-info" style="background-color: black">
		<h2 class="user-info-text">Welcome back, @UserLogin.User.username</h2>
		<div class="user-info-container" style="display: flex;">
			<div class="user-email">
				@if (string.IsNullOrEmpty(@UserLogin.User.email))
				{
					<p class="user-info-text">Email: N/A</p>
					<button type="button" class="btn btn-red" @onclick="changeEmail">Change</button>
				}
				else
				{
					<p class="user-info-text">Email: @UserLogin.User.email</p>
					<button type="button" class="btn btn-red" @onclick="changeEmail">Change</button>
				}
				@if (cEmail)
				{
					<EditForm Model="@u" OnValidSubmit="@UpdateUserEmail">
						<DataAnnotationsValidator />
						<ValidationSummary />

						<InputText id="useremail" @bind-Value="u.email" />
						<button type="submit" class="btn btn-red">Submit</button>
					</EditForm>
				}
			</div>
			<div class="user-address">
				@if (string.IsNullOrEmpty(@UserLogin.User.address))
				{
					<p class="user-info-text">Address: N/A </p>
					<button type="button" class="btn btn-red" @onclick="changeAddress">Change</button>
				}
				else
				{
					<p class="user-info-text">Address: @UserLogin.User.address</p>
					<button type="button" class="btn btn-red" @onclick="changeAddress">Change</button>
				}
				
			</div>
		</div>
	</div>
}


<div class="candiates-header">
	<h2 class="subheading">My Candidates</h2>
</div>

@if (usrCandidates is null)
{
}
else
{
	@foreach (var contest in usrCandidates)
	{
		@foreach (var candidate in contest.candidates)
		{
			<div class="candidates-container">
				<div class="img-bg"></div>
				<div class="candidate-text">
					<h3 class="subheading">@candidate.name</h3>
					<h4 class="subheading">@contest.office</h4>
					<p class="info">
						@candidate.party<br>
						@candidate.candidateUrl<br>
						@candidate.email<br>
						@candidate.phone<br>
					</p>
					<div>
						<h4 class="subheading">Notes:</h4>
						<p class="info"></p>
					</div>
				</div>
			</div>
		}
	}
}

<button type="button" class="btn btn-red" style="display: block; margin: auto; width: 20%;" @onclick="goToCandidates">Add Candidates</button>

<style>
	.banner-container {
		position: relative;
		width: 100%;
		max-width: 100vw;
		height: auto;
		overflow: hidden;
		justify-content: stretch;
		margin-bottom: 40px;
	}

	.banner-image {
		width: 100vw;
		height: auto;
		display: block;
		opacity: 0.3;
	}

	.page-title {
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		color: black;
		font-size: 5vw;
		z-index: 2;
		text-align: center;
	}

	.subheading {
		color: #e21833;
		font-weight: bold;
	}
	.candidates-container {
		display: flex;
	}

	.candidates-container > div {
		width: 50%;
	}


	.img-bg{
		background-color: #ffd200;
	}
	
	.user-info{
		padding: 2%;
	}
	.user-info-text{
		color: white;
	}

	.user-info-container > div {
		width: 50%;
	}

</style>


@code {
	//CandidateModel.contests
	private List<Contest> usrCandidates;
	private bool cEmail = false;
	private UserModel u = new UserModel();

	private void goToCandidates()
	{
		NavigationManager.NavigateTo("/Candidates");
	}

	private void changeEmail()
	{
		//UserLogin.User.email;
		cEmail = !cEmail;

	}

	private async Task UpdateUserEmail()
	{
		UserLogin.User.email = u.email;
		await _db.UpdateEmail(UserLogin.User);
		cEmail = !cEmail;
		u = new UserModel();
	}

	private void changeAddress()
	{
		NavigationManager.NavigateTo("/FindMyDistrict");
	}
}

@page "/MyRepresentatives"
@using ElectionAppLibrary.Models
@using ElectionAppLibrary.DataAccess
@inject IRepAPIRequests representative
@inject IRepData _db

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<div class="banner-container">
    <img src="banner2.png" alt="Banner" class="banner-image" />
    <h1 class="page-title"><b>My Representatives</b></h1>
</div>

<div class="tabs"> 
  <input type="radio" class="tabs__radio" name="RepTabs" id="MDRep" checked>
  <label for="MDRep" class="tabs__label">Maryland Representatives</label>
  <div class="tabs__content"> 
        @foreach (RepModelDB x in displayReps)
        {
            if (x.divisionId.Contains("md") && !x.office.Contains("U.S."))
            {
                <div class="candidates-container">
                    @if(!String.IsNullOrEmpty(x.photoURL)){
                        <div class="img-bg"><img src="@x.photoURL" style="display:block;width:50%;height:75%;margin:auto;" /></div>
                    }
                    else
                    {
                        <div class="img-bg"><img src="/MarylandInfoLogo.png" style="display:block;width:50%;height:75%;margin:auto;" /></div>
                    }
                    
                    <div class="candidate-text">
                        <h3 class="subheading">@x.name</h3>
                        <h4 class="subheading">@x.office</h4>
                        <h5 class="subheading">@x.party</h5>
                        <p class="info" style="font-size:110%">
                            <b>Website Links:</b> <br />
                            @x.urls<br />
                            <b>Contact Information:</b><br />
                            @x.emails<br/>
                            @x.phones<br/>
                        </p>
                    </div>
                </div>
            }
        }
    </div>

  <input type="radio" class="tabs__radio" name="RepTabs"id="StateRep">
  <label for="StateRep" class="tabs__label">U.S. Representatives</label>
 <div class="tabs__content">
        @foreach (RepModelDB x in displayReps)
        {
            if (!x.divisionId.Contains("md") || x.office.Contains("U.S."))
            {
                <div class="candidates-container">
                    @if (!String.IsNullOrEmpty(x.photoURL))
                    {
                        <div class="img-bg"><img src="@x.photoURL" style="display:block;width:50%;height:75%;margin:auto;" /></div>
                    }
                    else
                    {
                        <div class="img-bg"><img src="/MarylandInfoLogo.png" style="display:block;width:50%;height:75%;margin:auto;" /></div>
                    }

                    <div class="candidate-text">
                        <h3 class="subheading">@x.name</h3>
                        <h4 class="subheading">@x.office</h4>
                        <h5 class="subheading">@x.party</h5>
                        <p class="info" style="font-size:110%">
                            <b>Website Links:</b> <br />
                            @x.urls<br />
                            <b>Contact Information:</b><br />
                            @x.emails<br />
                            @x.phones<br />
                        </p>
                    </div>
                </div>
            }
        }
  </div>
  
</div>


<style>

    .tabs {
      display: flex;
      flex-wrap: wrap;
      max-width: 800px;
      font-family: sans-serif;
      margin: auto;
    }

    .tabs__label {
        padding: 10px 80px;
        cursor: pointer;
        background-color: #ffd200;
    }

    .tabs__radio {
      display: none;
    }

    .tabs__content {
      order:1;
      width:100%;
      font-size: 0.9em;
      display: none;

    }

    .tabs__radio:checked + .tabs__label {
        font-weight: bold;
        color: #e21833;
        border-bottom: 2px solid #e21833;
    }

    .tabs__radio:checked + .tabs__label + .tabs__content {
        display: initial;
    }


    .subheading {
        color: #e21833;
        font-weight: bold;
    }

    .candidates-container {
        display: flex;
    }

        .candidates-container > div {
            width: 50%;
        }


    .img-bg {
        background-color: #ffd200;
    }

    .candidate-text{
        padding: 5%;
    }

</style>


@code {
    private string errorMessage = "";
    private RepresentativeModel? rep;
    private List<RepModelDB> displayReps = new List<RepModelDB>();
    private List<RepModelDB> reps = new List<RepModelDB>();
    private RepModelDB r = new RepModelDB();

    protected override async Task OnInitializedAsync()
    {
        displayReps = await _db.GetReps();
        // Optionally, call GetReps() to get the latest data from the API
        GetReps();
    }

    //Here as an example; it will only be used by site admins if reps need to be changed.
    private async void GetReps()
    {
        errorMessage = "";
        string ocdId = "ocd-division/country:us/state:md";
        var apiResponse = await representative.RepOnGet(ocdId);

        if (apiResponse.Success && apiResponse.Data != null)
        {
            reps = r.ConvertRep(apiResponse.Data);

            foreach (RepModelDB repModelDB in reps)
            {
                await _db.InsertRep(repModelDB);
            }

            // Update the displayReps list
            displayReps = await _db.GetReps();
        }
        else
        {
            errorMessage = apiResponse.ErrorMessage ?? "No data available at the moment, please try again in a few minutes.";
        }
    }
}
